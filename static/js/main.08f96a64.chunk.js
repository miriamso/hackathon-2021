(this["webpackJsonphackathon-2021"]=this["webpackJsonphackathon-2021"]||[]).push([[0],{46:function(e){e.exports=JSON.parse('[{"id":1503,"language":"en-us","name":"Java_High_Risk -> SQL_Injection","resultDescription":"The application\'s @DestinationMethod method executes an SQL query with @DestinationElement, at line @DestinationLine of @DestinationFile. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\\n\\nAn attacker would be able to inject arbitrary syntax and data into the SQL query, by crafting a malicious payload and providing it via the input @SourceElement; this input is then read by the @SourceMethod method at line @SourceLine of @SourceFile. This input then flows through the code, into a query and to the database server - without sanitization.\\n\\nThis may enable an SQL Injection attack.\\n\\n","risk":"An attacker could directly access all of the system\'s data. The attacker would likely be able to steal any sensitive information stored by the system, including private user information, credit card details, proprietary business data, and any other secret data. Likewise, the attacker could possibly modify or erase existing data, or even add new bogus data. In some scenarios, it may even be possible to execute code on the database. \\n\\nIn addition to disclosing or altering confidential information directly, this vulnerability might also be used to achieve secondary effects, such as bypassing authentication, subverting security checks, or forging a data trail. \\n\\nFurther increasing the likelihood of exploit is the fact that this flaw is easy for attackers to find, and easy to exploit.\\n\\n","cause":"The application stores and manages data in a database, by submitting a textual SQL query to the database engine for processing. The application creates the query by simple string concatenation, embedding untrusted data. However, there is no separation between data and code; furthermore, the embedded data is neither checked for data type validity nor subsequently sanitized. Thus, the untrusted data could contain SQL commands, or modify the intended query. The database would interpret the altered query and commands as if they originated from the application, and execute them accordingly.\\n\\nNote that an attacker can exploit this vulnerability either by modifying the URL, or by submitting malicious data in the user input or other request fields.\\n\\n","generalRecommendations":"*   Validate all untrusted data, regardless of source. Validation should be based on a whitelist: accept only data fitting a specified structure, rather than reject bad patterns. \\n*   In particular, check for:\\n    *   Data type\\n    *   Size\\n    *   Range\\n    *   Format\\n    *   Expected values.\\n*   Restrict access to database objects and functionality, according to the Principle of Least Privilege.\\n*   Do not use dynamically concatenate strings to construct SQL queries. \\n*   Prefer using DB Stored Procedures for all data access, instead of ad-hoc dynamic queries. \\n*   Instead of unsafe string concatenation, use secure database components such as parameterized queries and object bindings (for example, commands and parameters). \\n*   Alternatively, an even better solution is to use an ORM library, in order to pre-define and encapsulate the allowed commands enabled for the application, instead of dynamically accessing the database directly. In this way the code plane and data plane should be isolated from each other.\\n*   Data validation can be performed effectively using a secure library, such as OWASP\'s Encoder or ESAPI libraries. \\n*   Prefer using `PreparedStatement` for parameterizing the queries, or even better `CallableStatement`. Add dynamic data via the `.set*()` methods, instead of string concatenation. \\n*   Consider using an ORM package, such as `Hibernate`, `myBatis`, or others.","insertDate":"2020-09-10T11:26:54.93","codeSample":[{"title":"Create SQL query using string concatenation","sourceCodeExample":"public int getUserId(HttpServletRequest request) \\n        throws ServletException, IOException {\\n    int userId = 0;\\n    \\n    String userName = request.getParameter(\\"UserName\\");\\n    String sql = \\"SELECT [UserID] FROM [AppUsers] WHERE [UserName] = \'\\" + userName + \\"\' \\" ;\\n\\n    try {\\n        Connection conn = getConnection(); \\n        Statement stmt = conn.createStatement(); \\n        ResultSet data = stmt.executeQuery(sql);\\n        \\n        userId = data.getInt(1);        \\n    } catch (SQLException ex) {\\n        handleExceptions(ex);\\n    }\\n    finally {\\n        closeQuietly(data);\\n        closeQuietly(stmt);\\n        closeQuietly(conn);\\n    }\\n    \\n    return userId;\\n}","programmingLanguage":"Java","vulnerable":true},{"title":"Create SQL query using Sanitized Username","sourceCodeExample":"public int getUserId(HttpServletRequest request) \\n        throws ServletException, IOException {\\n    int userId = 0;\\n    \\n    String userName = request.getParameter(\\"UserName\\");\\n\\n    // Sanitize input using OWASP\'s ESAPI Encoder library\\n    //   Still not complete solution!\\n    Encoder esapiEncoder = new DefaultEncoder();\\n    String sanitizedUserName = esapiEncoder.encodeForSQL(new OracleCodec(), userName); \\n\\n    String sql = \\"SELECT [UserID] FROM [AppUsers] WHERE [UserName] = \'\\" + sanitizedUserName + \\"\' \\" ;\\n\\n    try {\\n        Connection conn = getConnection(); \\n        Statement stmt = conn.createStatement(); \\n        ResultSet data = stmt.executeQuery(sql);\\n        \\n        userId = data.getInt(1);        \\n    } catch (SQLException ex) {\\n        handleExceptions(ex);\\n    }\\n    finally {\\n        closeQuietly(data);\\n        closeQuietly(stmt);\\n        closeQuietly(conn);\\n    }\\n    \\n    return userId;\\n}","programmingLanguage":"Java","vulnerable":false},{"title":"Build PreparedStatement to call Stored Procedure and set input to parameters","sourceCodeExample":"public int getUserId(HttpServletRequest request) \\n        throws ServletException, IOException {\\n    int userId = 0;\\n    \\n    String userName = request.getParameter(\\"UserName\\");\\n    String sqlStoredProc = \\"{call getUserId (?, ?)}\\";\\n\\n    try {\\n        Connection conn = getConnection(); \\n        CallableStatement stmt = conn.prepareCall(sqlStoredProc); \\n        \\n        stmt.setString(1, userName);         \\n        stmt.registerOutParameter(2, java.sql.Types.INTEGER);\\n\\n        stmt.execute();\\n        userId = stmt.getInt(2);\\n    } catch (SQLException ex) {\\n        handleExceptions(ex);\\n    }\\n    finally {\\n        closeQuietly(stmt);\\n        closeQuietly(conn);\\n    }\\n    \\n    return userId;\\n}","programmingLanguage":"Java","vulnerable":false}]}]')},58:function(e,t,n){},59:function(e,t,n){},69:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),r=n(43),s=n.n(r),o=(n(58),n(41)),c=n(4),l=n(7),d=n(94),u=n(90),h=n(95),m=n(89),p=n(92),b=n.p+"static/media/background.816f9a52.svg",g=n.p+"static/media/listImage.58028b61.svg",y=n(46),v=(n(59),n(1)),j=function(){var e=Object(c.g)(),t=Object(a.useState)("2"),n=Object(l.a)(t,2),i=n[0],r=n[1],s=y.find((function(t){return t.id===parseInt(e.vulname,10)}));return Object(v.jsx)("div",{className:"App",style:{background:"url(".concat(b,")"),backgroundRepeat:"no-repeat"},children:Object(v.jsxs)("header",{className:"App-header",children:[Object(v.jsx)(d.a,{variant:"h3",component:"div",gutterBottom:!0,children:"We got you covered"}),Object(v.jsx)(d.a,{variant:"h4",component:"div",gutterBottom:!0,children:null===s||void 0===s?void 0:s.name.replaceAll("_"," ")}),Object(v.jsxs)(m.a,{value:i,children:[Object(v.jsxs)(u.a,{value:i,onChange:function(e,t){r(t)},"aria-label":"icon label tabs example",children:[Object(v.jsx)(h.a,{icon:Object(v.jsx)("img",{src:g,alt:""}),label:"Genaral informatoion",value:"1"}),Object(v.jsx)(h.a,{icon:Object(v.jsx)("img",{src:g,alt:""}),label:"Lessons",value:"2"}),Object(v.jsx)(h.a,{icon:Object(v.jsx)("img",{src:g,alt:""}),label:"Stackoverflow results",value:"3"})]}),Object(v.jsxs)(p.a,{value:"1",className:"tab-1",children:[Object(v.jsx)(d.a,{variant:"h6",component:"div",gutterBottom:!0,children:"Description"}),Object(v.jsx)("div",{children:null===s||void 0===s?void 0:s.resultDescription}),Object(v.jsx)(d.a,{variant:"h6",component:"div",gutterBottom:!0,children:"Risk"}),Object(v.jsx)("div",{children:null===s||void 0===s?void 0:s.risk}),Object(v.jsx)(d.a,{variant:"h6",component:"div",gutterBottom:!0,children:"Cause"}),Object(v.jsx)("div",{children:null===s||void 0===s?void 0:s.cause}),Object(v.jsx)(d.a,{variant:"h6",component:"div",gutterBottom:!0,children:"General Recommendations"}),Object(v.jsx)("div",{children:null===s||void 0===s?void 0:s.generalRecommendations})]}),Object(v.jsx)(p.a,{value:"2",children:"Item Two"}),Object(v.jsx)(p.a,{value:"3",children:"Item Three"})]}),Object(v.jsx)("div",{})]})})};var x=function(){return Object(v.jsx)(o.a,{children:Object(v.jsxs)(c.c,{children:[Object(v.jsx)(c.a,{path:"/:vulname",element:Object(v.jsx)(j,{})}),Object(v.jsx)(c.a,{path:"/",element:Object(v.jsx)(j,{})})]})})},f=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,96)).then((function(t){var n=t.getCLS,a=t.getFID,i=t.getFCP,r=t.getLCP,s=t.getTTFB;n(e),a(e),i(e),r(e),s(e)}))};s.a.render(Object(v.jsx)(i.a.StrictMode,{children:Object(v.jsx)(x,{})}),document.getElementById("root")),f()}},[[69,1,2]]]);
//# sourceMappingURL=main.08f96a64.chunk.js.map